<templateSet group="OBD">
  <template name="obdField" value="export const $LABEL$ = new OBDField('01$HEX$', '$label$', '$unit$', 0, $function$);" description="OBD Field declaration" toReformat="true" toShortenFQNames="true">
    <variable name="HEX" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="label" expression="clipboard()" defaultValue="" alwaysStopAt="true" />
    <variable name="unit" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="function" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LABEL" expression="capitalizeAndUnderscore(label)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="obdAttr" value="/**&#10; * The representation of $label$.&#10; */&#10;$name$?: OBDField;" description="OBD Data attribute" toReformat="true" toShortenFQNames="true">
    <variable name="label" expression="clipboard()" defaultValue="" alwaysStopAt="true" />
    <variable name="name" expression="camelCase(label)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="obdOperator" value="import {Observable, Operator, Subscriber, TeardownLogic} from 'rxjs';&#10;import {OBDEvent} from '../model/OBDEvent';&#10;import {OBDOuterSubscriber} from '../model/OBDOuterSubscriber';&#10;&#10;export function $camelName$() {&#10;&#9;return function (source: Observable&lt;OBDEvent&gt;): Observable&lt;OBDEvent&gt; {&#10;&#9;&#9;return source.lift(new $className$Operator());&#10;&#9;}&#10;}&#10;&#10;class $className$Operator implements Operator&lt;OBDEvent, OBDEvent&gt; {&#10;&#9;call(subscriber: Subscriber&lt;OBDEvent&gt;, source: Observable&lt;OBDEvent&gt;): TeardownLogic {&#10;&#9;&#9;return source.subscribe(new $className$Subscriber(subscriber));&#10;&#9;}&#10;}&#10;&#10;class $className$Subscriber extends OBDOuterSubscriber {&#10;&#10;&#9;constructor(destination: Subscriber&lt;OBDEvent&gt;) {&#10;&#9;&#9;super(destination);&#10;&#9;}&#10;&#10;&#9;/**&#10;&#9; * Return the frequency of execution of this command.&#10;&#9; * @return that this command must be executed every pulse.&#10;&#9; */&#10;&#9;pulse(): number {&#10;&#9;&#9;return 1;&#10;&#9;}&#10;&#10;&#9;/**&#10;&#9; * Return the string representation of the OBD Read command.&#10;&#9; * @returns the string representation of the OBD Read command&#10;&#9; */&#10;&#9;command(): string {&#10;&#9;&#9;return '01 $pid$ 1\r';&#10;&#9;}&#10;&#10;&#9;/**&#10;&#9; * Return the name of the OBD Field on OBD Data object.&#10;&#9; * @returns the name of the OBD Field on OBD Data object.&#10;&#9; */&#10;&#9;field(): string {&#10;&#9;&#9;return '$camelName$';&#10;&#9;}&#10;&#10;&#9;/**&#10;&#9; * Parse the OBD response.&#10;&#9; * @param bytes the response read from OBD.&#10;&#9; * @returns the parsed response.&#10;&#9; */&#10;&#9;parse(bytes: string[]): number | string {&#10;&#9;&#9;return parseInt(bytes[2], 16);&#10;&#9;}&#10;&#10;}&#10;" description="OBD Operator" toReformat="false" toShortenFQNames="true">
    <variable name="camelName" expression="camelCase(fileNameWithoutExtension())" defaultValue="" alwaysStopAt="false" />
    <variable name="className" expression="clipboard()" defaultValue="" alwaysStopAt="false" />
    <variable name="pid" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>