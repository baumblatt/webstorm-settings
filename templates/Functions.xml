<templateSet group="Functions">
  <template name="funop" value="$nome$ = () =&gt; pipe(&#10;    concatMap((mensagem: Mensagem) =&gt; {&#10;        const {$params$} = mensagem.payload;&#10;&#10;        return of({$params$}).pipe(&#10;            map(($result$: $type$) =&gt; {&#10;                return {&#10;                    ...mensagem, payload: {&#10;                        ...mensagem.payload,&#10;                        $result$&#10;                    }&#10;                }&#10;            })&#10;        )&#10;    }),&#10;);&#10;" description="Cria um operador para functions." toReformat="true" toShortenFQNames="true">
    <variable name="nome" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="params" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="result" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="any" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="funclass" value="export class $name$ {&#10;    constructor(private config: any){&#10;    }&#10;&#10;    &#10;    $END$&#10;}" description="Cria uma nova classe para functions" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="funopreq" value="$nome$ = () =&gt; pipe(&#10;    concatMap((mensagem: Mensagem) =&gt; {&#10;        const {$params$} = mensagem.payload;&#10;        &#10;        const query = '';&#10;        const body = {}&#10;&#10;        return RxHR.post(`${this.config.endpoint}${this.config.context}${query}`, {&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                'Authorization': this.config.authorization&#10;            },&#10;            body,&#10;            json: true&#10;        }).pipe(&#10;            map((result) =&gt; result.body),&#10;            map(($result$: $type$) =&gt; {&#10;                return {&#10;                    ...mensagem, payload: {&#10;                        ...mensagem.payload,&#10;                        $result$&#10;                    }&#10;                }&#10;            })&#10;        );&#10;    }),&#10;);" description="Cria um operador com request para functions." toReformat="true" toShortenFQNames="true">
    <variable name="nome" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="params" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="result" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="funcall" value="export const $nome$ = functions.region('us-central1').https.onCall((data, context: CallableContext) =&gt; {&#10;&#9;if (!context.auth || !context.auth.token.cpf) {&#10;&#9;&#9;return new HttpsError('failed-precondition', 'Usuário não autenticado.', 'O usuário deve estar autenticado.');&#10;&#9;}&#10;&#10;&#9;const {cpf} = context.auth.token;&#10;&#9;&#10;&#9;const {$params$} = data; &#10;&#10;&#9;const observable = of({&#10;&#9;&#9;context: {data, context},&#10;&#9;&#9;payload: {cpf, $params$}&#10;&#9;}).pipe(&#10;        $END$&#10;&#9;);&#10;&#10;&#9;return new Promise((resolve, reject) =&gt; {&#10;&#9;&#9;observable.subscribe({&#10;&#9;&#9;&#9;next: (mensagem: Mensagem) =&gt; resolve(mensagem.payload),&#10;&#9;&#9;&#9;error: (error) =&gt; {&#10;&#9;&#9;&#9;&#9;console.warn(JSON.stringify(error));&#10;&#9;&#9;&#9;&#9;reject((error instanceof HttpsError) ? error : new HttpsError(&#10;&#9;&#9;&#9;&#9;&#9;'unavailable',&#10;&#9;&#9;&#9;&#9;&#9;'Ops: ocorreu um problema ao processar sua requisição',&#10;&#9;&#9;&#9;&#9;&#9;error&#10;&#9;&#9;&#9;&#9;));&#10;&#9;&#9;&#9;}&#10;&#9;&#9;});&#10;&#9;});&#10;});" description="Cria uma nova função de onCall" toReformat="false" toShortenFQNames="true">
    <variable name="nome" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="params" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="funpublish" value="export const $name$Run = functions.region('us-central1').pubsub.topic('$topic$').onPublish((message: Message) =&gt; {&#10;&#9;const cpf = message.attributes;&#10;&#9;const payload = JSON.parse(Buffer.from(message.data, 'base64').toString());&#10;&#10;    const observable = of({&#10;        context: message, &#10;        payload: {cpf, ...payload}&#10;    }).pipe(&#10;        $END$&#10;&#9;);&#10;&#10;&#9;return new Promise((resolve, reject) =&gt; {&#10;&#9;&#9;observable.subscribe({&#10;&#9;&#9;&#9;next: mensagem =&gt; resolve(mensagem.payload),&#10;&#9;&#9;&#9;error: (error) =&gt; {&#10;&#9;&#9;&#9;&#9;console.warn(JSON.stringify(error));&#10;&#9;&#9;&#9;&#9;reject((error instanceof HttpsError) ? error : new HttpsError(&#10;&#9;&#9;&#9;&#9;&#9;'unavailable',&#10;&#9;&#9;&#9;&#9;&#9;'Ops: ocorreu um problema ao processar a mensagem',&#10;&#9;&#9;&#9;&#9;&#9;error&#10;&#9;&#9;&#9;&#9;));&#10;&#9;&#9;&#9;}&#10;&#9;&#9;});&#10;&#9;});&#10;});" description="Crua uma nova função onPublish" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="topic" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="funopdocget" value="$nome$ = () =&gt; pipe(&#10;    concatMap((mensagem: Mensagem) =&gt; {&#10;        const {$params$} = mensagem.payload;&#10;&#10;        return from(this.db.doc('collection/document').get()).pipe(&#10;            map((snapshot: DocumentSnapshot) =&gt; {&#10;                const $doc$ = snapshot.data();&#10;&#10;                return {...mensagem, payload: {...mensagem.payload, $doc$}}&#10;            }),&#10;        );&#10;    }),&#10;);&#10;&#10;" description="Cria um operador para functions para recuperar um documento do firestore" toReformat="true" toShortenFQNames="true">
    <variable name="nome" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="params" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="doc" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>